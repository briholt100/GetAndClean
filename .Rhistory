exp(-1)
e^1
exp(1)
exp(-(-1))
1/1-exp(-(-1))
1/1-exp(-(-1.5+3*1+(-.5)*5))
1/1+exp(-(-1.5+3*1+(-.5)*5))
1/1+exp-((-1.5+3*1+(-.5)*5))
1/1+exp-(-1.5+3*1+(-.5)*5)
(-1.5+3*1+(-.5)*5)
1/1+exp(-(-1.5+3*1+(-.5)*5))
exp(3)
exp(-3)
1/1+exp(-(-1.5+(3*1)+((-.5)*5)))
1/(1+exp(-(-1.5+(3*1)+((-.5)*5))))
log(0.2689414)
1-0.2689414
0.2689414/0.7310586
0.2689414/0.7310586
1/0.2689414/0.7310586
0.2689414/0.7310586
(-1.5+(3*1)+((-.5)*5))
log(-1.5+(3*1)+((-.5)*5))
(-1.5+(3*1)+((-.5)*5))
log(1)
log(-1)
log(0.3678794)
log(-1.5+(3*1)+((-.5)*5))
1/(1+exp(-(-1.5+(3*1)+((-.5)*5))))
version
install.packages("tm",dependencies=TRUE)
install.packages("slam")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggmap")
install.packages("igraph")
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("caret")
install.packages("tm")
install.packages("tm",dependencies=TRUE)
getwd()
room<-read.csv("SpAll4-9.csv")
room<-read.csv("roomAnal/SpAll4-9.csv")
head(room)
str(room)
table(room$DEPT)
t(table(room$DAYS))
table(room$BLDG)
roomLog<-glm(ROOM~DEPT+BLDG,data=room,family=binomial)
summary(roomLog)
library(httr)
library(httpuv)
library(jsonlite)
library(sqldf)
oauth_endpoints("github")
myapp = oauth_app("github",
key="406d792236c59dcf6de8",secret="9b8afab5451a061597f06034fcbeeb7ea4d47a58")
sig = sign_oauth1.0(myapp,
token = "26fdc7c6c65a116fb715e337bc0f79a1e17d19a1",
#token_secret = "270159fac5e3452e2482de38980913ce88a45e6c"
)
homeTL = GET("https://api.github.com/users/jtleek/repos", sig)
homeTL
oauth_endpoints("github")
myapp <- oauth_app("github", key="406d792236c59dcf6de8",secret="9b8afab5451a061597f06034fcbeeb7ea4d47a58")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = "1ffceceecae7fdf2a71619dbaedf2e502c83681b")
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = "1ffceceecae7fdf2a71619dbaedf2e502c83681b")
gtoken
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
getwd()
setwd("/home/brian/Projects/Coursera/GetAndCleanData")
if (!file.exists("data")) {  dir.create("data")}
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="./data/idahoHousing.csv")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="./data/idahoHousing.csv")
idaho<-read.csv("./data/idahoHousing.csv")
names(idaho)
idaho[idaho$ACR==3,]
idaho[idaho$ACR==3,idaho$ACR]
idaho[idaho$ACR==3,"ACR"]
idaho[which(idaho$ACR==3),"ACR"]
idaho[which(idaho$ACR==3 & idaho$AGS == 6),c("ACR","AGS")]
c(idaho$ACR==3 & idaho$AGS == 6)
idaho %in% c(idaho$ACR==3 & idaho$AGS == 6)
table(c(idaho$ACR==3 & idaho$AGS == 6))
nrow(idaho[which(idaho$ACR==3 & idaho$AGS == 6),c("ACR","AGS")])
test<-(c(idaho$ACR==3 & idaho$AGS == 6))
test
idaho[which(idaho$ACR==3 & idaho$AGS == 6),c("ACR","AGS")]
test[test==T]
idaho$agricultureLogical<-(c(idaho$ACR==3 & idaho$AGS == 6))
head(idaho)
idaho(125,)
idaho[125,]
which(idaho$agricultureLogical)
install.packages("jpeg")
library("jpeg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile="./data/leek.jpg")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile="./data/leek.jpg")
?readJPEG
idaho<-readJPEG("./data/leek.jpg")
leekPhoto<-readJPEG("./data/leek.jpg")
idaho<-read.csv("./data/idahoHousing.csv")
idaho[which(idaho$ACR==3 & idaho$AGS == 6),c("ACR","AGS")]
idaho$agricultureLogical<-(c(idaho$ACR==3 & idaho$AGS == 6))
which(idaho$agricultureLogical)
leekPhoto
leekPhoto<-readJPEG("./data/leek.jpg",native =T)
quantile(leekPhoto,probs=sseq(0,.3,.8,1))
quantile(leekPhoto,probs=seq(0,.3,.8,1))
quantile(leekPhoto,probs=seq(0,1,.1))
15258512+638
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",destfile="./data/gdp.csv")
gdp<-read.csv("./data/gdp.csv")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",destfile="./data/edu.csv")
edu<-read.csv("./data/edu.csv")
names(edu,gdp)
names(edu)
names(gdp)
str(gdp)
head(gdp)
head(edu)
(edu[1,])
(edu[,1])
gdp[,1]
c(edu[,1]&gdp[,1])
c(edu[,1]==gdp[,1])
match(edu[,1],gdp[,1])
sort(match(edu[,1],gdp[,1]))
length(sort(match(edu[,1],gdp[,1])))
?match
1:10 %in% c(1,3,5,9)
edu[,1] %in% gdp[,1]
str(gdp)
str(edu)
edu[,1] %in% edu[,1]
gdp[,1] %in% edu[,1]
gdp[,1] %in% edu[,1]
head(gdp)
table(gdp[,1] %in% edu[,1])
table(edu[,1] %in% gdp[,1])
str(edu)
str(gdp)
merge(gdp,edu,by.x="X", by.y="CountryCode",all=T)
df<-merge(gdp,edu,by.x="X", by.y="CountryCode",all=T)
head(df)
df<-merge(gdp,edu,by.x="X", by.y="CountryCode")
head(df)
str(df)
df<-merge(edu,gdp,by.y="X", by.x="CountryCode")
str(df)
str(gdp)
str(edu)
names(edu)
names(gdp)
table(edu[,31])
names(gdp)
tail(gdp)
head(gdp)
table(gdp[,X.2] %in% edu[,31])
table(gdp[,"X.2"] %in% edu[,31])
table(edu[,31] %in% gdp[,"X.2"])
df<-merge(edu,gdp,by.y="X.2", by.x="CountryCode")
str(df)
df
df<-merge(edu,gdp,by.y="X.2", by.x="Short.Name")
str(df)
?sort
names(df)
df[sort(df$33,decreasing=T),]
df[order(df$33,decreasing=T),]
idaho[which(idaho$ACR==3 & idaho$AGS == 6),c("ACR","AGS")]
idaho$agricultureLogical<-(c(idaho$ACR==3 & idaho$AGS == 6))
which(idaho$agricultureLogical)
idaho
idaho[order(idaho$NP)]
idaho[order(idaho$NP),]
df[order(df[,33],decreasing=T),]
getwd()
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",destfile="./data/gdp.csv")
gdp<-read.csv("./data/gdp.csv",skip=4,nrows=190,col.names=c("CountryCode","Ranking","v3","Country","dollars","v6","v7","v8","v9","v10"))
gdp<-gdp[,c(1:2,4:5)]
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",destfile="./data/edu.csv")
edu<-read.csv("./data/edu.csv",header=T)
table(edu$"Income.Group")
sort(gdp$CountryCode)
names(gdp)
sort(intersect(gdp[,3],edu[,31]))
table(edu[,31] %in% gdp[,"Country"])
table(edu[,1] %in% gdp[,1])
table( gdp[,1] %in% edu[,1])
head(gdp)
df<-merge(edu,gdp,by.x="CountryCode", by.y="CountryCode")
names(df)
df<-df[order(df[,32],decreasing=T),]
head(df,13)
tapply(df$Ranking,df$Income.Group,mean)
df$GdpGroups<-cut(df$Ranking,breaks=quantile(df$Ranking,probs=seq(0,1,.2)))
head(df)
table(df$GdpGroups)
table(df$GdpGroups,df$Income.Group)
"how many are lower middle income but amount top 38 ranking?"
df[df$Ranking < 39 & df$Income.Group == "Lower middle income",31]
setwd("/home/brian/Projects/Coursera/GetAndCleanData/data/UCI HAR Dataset")
subject_test<-read.table("./test/subject_test.txt",sep="")
X_test<-read.table("./test/X_test.txt",sep="")
Y_test<-read.table("./test/y_test.txt",sep="")
test_set<-cbind(subject_test,Y_test,X_test)
######
#Create Table for train Data
subject_train<-read.table("./train/subject_train.txt",sep="")
X_train<-read.table("./train/X_train.txt",sep="")
Y_train<-read.table("./train/y_train.txt",sep="")
train_set<-cbind(subject_train,Y_train,X_train)
######
#Create "Set" Variable to differentiate train from test in final data
test_set$Set<-1
train_set$Set<-0
###Merge test and train set, then sort by 1st column (subject)
full_data<-rbind(test_set,train_set)
dim(full_data)
full_data<-full_data[order(full_data[,1]),]
####
#Varialbes name manipulation
Activities<-read.table("./activity_labels.txt",sep="") #lists activities by name
Features<- read.csv("./features.txt",sep="",header=F) #561 list of features
table1<-sort(table((Features[,2])),decreasing=T) #creates table to find duplicates
table1[table1>1] #lists duplicates; none have "mean" or "std"
grep("mean|std",names(table1[table1>1]),ignore.case=T) #confirms list doesn't contain mean/std
grep("mean|std",Features[,2],ignore.case=T,value=T)
#####
#Rename columns and activity
fullColNames<-make.names(Features[,2],unique=T)
fullColNames<-c("Subject","Activity",fullColNames,"Set")
colnames(full_data)<-fullColNames
head(names(full_data))
KeptColumns<-grep("subject|activity|mean|std|set",fullColNames,ignore.case=T,value=F)
tidy<-full_data[,KeptColumns]
tidy$Activity<-with(tidy,ifelse(tidy$Activity==1,"Walk",
ifelse(tidy$Activity==2,"Walk_Up",
ifelse(tidy$Activity==3,"Walk_Down",
ifelse(tidy$Activity==4,"Sit",
ifelse(tidy$Activity==5,"Stand","Lay"))))))
######
#melt the data
library("reshape2")
names(tidy)
tidyMelt<-melt(tidy,id.vars=c("Subject","Activity"),measure.vars=c(tidy[,3:88]))
dcast(tidyMelt,Subject+Activity ~ variable,mean)
#last bit to do: Do the above but for all variables, also, rename varialbes?
#also make Readme and a markdown file.
=======
getwd()
#for latitutde
setwd("/home/brian/Projects/Coursera/GetAndClean/data/UCI HAR Dataset/")
dir()
#for dater
setwd("/home/brian/Projects/Coursera/GetAndCleanData/data/UCI HAR Dataset")
#for windater
setwd("C:\\Users\\Brian\\Documents\\Projects\\GetClean\\data\\UCI HAR Dataset")
########
######
#Create Table for Test Data
subject_test<-read.table("./test/subject_test.txt",sep="")
X_test<-read.table("./test/X_test.txt",sep="")
Y_test<-read.table("./test/y_test.txt",sep="")
test_set<-cbind(subject_test,Y_test,X_test)
######
#Create Table for train Data
subject_train<-read.table("./train/subject_train.txt",sep="")
X_train<-read.table("./train/X_train.txt",sep="")
Y_train<-read.table("./train/y_train.txt",sep="")
train_set<-cbind(subject_train,Y_train,X_train)
######
#Create "Set" Variable to differentiate train from test in final data
test_set$Set<-1
train_set$Set<-0
###Merge test and train set, then sort by 1st column (subject)
full_data<-rbind(test_set,train_set)
dim(full_data)
full_data<-full_data[order(full_data[,1]),]
####
#Varialbes name manipulation
Activities<-read.table("./activity_labels.txt",sep="") #lists activities by name
Features<- read.csv("./features.txt",sep="",header=F) #561 list of features
table1<-sort(table((Features[,2])),decreasing=T) #creates table to find duplicates
table1[table1>1] #lists duplicates; none have "mean" or "std"
grep("mean|std",names(table1[table1>1]),ignore.case=T) #confirms list doesn't contain mean/std
grep("mean|std",Features[,2],ignore.case=T,value=T)
#####
#Rename columns and activity
fullColNames<-make.names(Features[,2],unique=T)
fullColNames<-c("Subject","Activity",fullColNames,"Set")
colnames(full_data)<-fullColNames
head(names(full_data))
KeptColumns<-grep("subject|activity|mean|std|set",fullColNames,ignore.case=T,value=F)
tidy<-full_data[,KeptColumns]
tidy$Activity<-with(tidy,ifelse(tidy$Activity==1,"Walk",
ifelse(tidy$Activity==2,"Walk_Up",
ifelse(tidy$Activity==3,"Walk_Down",
ifelse(tidy$Activity==4,"Sit",
ifelse(tidy$Activity==5,"Stand","Lay"))))))
######
#melt the data
library("reshape2")
names(tidy)
head(tidy)
colMeans(tidy[,3:88])
?by
by(tidy,tidy[,1],colMeans(tidy[,3:88])
)
by(tidy,tidy[,1],FUN=colMeans(tidy[,3:88]))
by(tidy,tidy$Activity,mean))
by(tidy,tidy$Activity,mean)
by(tidy,tidy$Activity,colMeans)
by(tidy,tidy$Activity, function(x) colmeans(tidy[,3:88]))
by(tidy,tidy$Activity, function(x) colMeans(tidy[,3:88]))
by(tidy,c(tidy$Subject,tidy$Activity), function(x) colMeans(tidy[,3:88]))
by(tidy,c(tidy$Subject), function(x) colMeans(tidy[,3:88]))
aggregate (tidy, Subject+Activity ~ .-, mean)
aggregate (tidy, Subject+Activity ~ ., mean)
aggregate (tidy,Activity ~ ., mean)
aggregate (tidy,list(Activity) ~ ., mean)
aggregate (tidy,by=list(Activity) ~ ., mean)
aggregate (tidy,by=list(tidy$Activity) ~ ., mean)
list(tidy$Activity)
aggregate (data=tidy,.~Subject, mean)
aggregate(data=tidy,Subject~., mean)
aggregate(data=tidy,Subject+Activity~., mean)
aggregate(data=tidy,.~Subject+Activity, mean)
head(aggregate(data=tidy,.~Subject+Activity, mean))
head(aggregate(data=tidy,.~Activity+Subject, mean))
head(aggregate(data=tidy,.~Activity+Subject, mean),10)
dim(aggregate(data=tidy,.~Activity+Subject, mean),10)
dim(aggregate(data=tidy,.~Activity+Subject, mean))
head(aggregate(data=tidy,.~Activity+Subject, mean))
head(aggregate(data=tidy,.~Subject+Activity, mean))
head(aggregate(data=tidy,.~Subject+Activity, mean))
final_data<-(aggregate(data=tidy,.~Subject+Activity, mean))
head(final_data)
head(final_data[sort(final_data[,1]),])
